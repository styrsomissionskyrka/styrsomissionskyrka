{
  "openapi": "3.1.0",
  "info": {
    "title": "wp/v2",
    "summary": "Generated OpenAPI document of the namespace wp/v2 on styrsomissionskyrka-admin.",
    "version": "1"
  },
  "jsonSchemaDialect": "http://json-schema.org/draft-04/schema#",
  "servers": [{ "url": "http://localhost:8888/wp-json/wp/v2" }],
  "paths": {
    "/": {
      "get": {
        "parameters": [
          { "name": "namespace", "in": "query", "description": "", "required": false, "schema": { "type": "string" } },
          { "name": "context", "in": "query", "description": "", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set based on relationship between multiple taxonomies.",
              "enum": ["AND", "OR"]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." },
                    "include_children": {
                      "type": "boolean",
                      "description": "Whether to include child terms in the terms limiting the result set."
                    },
                    "operator": {
                      "type": "string",
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "enum": ["AND", "OR"]
                    }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items with specific terms assigned in the categories taxonomy."
            }
          },
          {
            "name": "categories_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." },
                    "include_children": {
                      "type": "boolean",
                      "description": "Whether to include child terms in the terms limiting the result set."
                    }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items except those with specific terms assigned in the categories taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." },
                    "operator": {
                      "type": "string",
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "enum": ["AND", "OR"]
                    }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items with specific terms assigned in the tags taxonomy."
            }
          },
          {
            "name": "tags_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items except those with specific terms assigned in the tags taxonomy."
            }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Limit result set to items that are sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Limit result set to items that are sticky." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format for the post.",
              "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Whether or not the post should be treated as sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The terms assigned to the post in the category taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the category taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the post_tag taxonomy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": { "type": "string", "description": "The password for the post if it is password protected." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format for the post.",
              "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Whether or not the post should be treated as sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The terms assigned to the post in the category taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the category taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the post_tag taxonomy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format for the post.",
              "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Whether or not the post should be treated as sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The terms assigned to the post in the category taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the category taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the post_tag taxonomy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format for the post.",
              "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Whether or not the post should be treated as sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The terms assigned to the post in the category taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the category taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the post_tag taxonomy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format for the post.",
              "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Whether or not the post should be treated as sticky.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The terms assigned to the post in the category taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the category taxonomy."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "The terms assigned to the post in the post_tag taxonomy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/posts/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/post-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to posts with a specific menu_order value."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to items with particular parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to all items except those of a particular parent ID."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The order of the post in relation to other posts.",
            "required": false,
            "schema": { "type": "integer", "description": "The order of the post in relation to other posts." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": { "type": "string", "description": "The password for the post if it is password protected." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The order of the post in relation to other posts.",
            "required": false,
            "schema": { "type": "integer", "description": "The order of the post in relation to other posts." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The order of the post in relation to other posts.",
            "required": false,
            "schema": { "type": "integer", "description": "The order of the post in relation to other posts." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The order of the post in relation to other posts.",
            "required": false,
            "schema": { "type": "integer", "description": "The order of the post in relation to other posts." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "excerpt",
            "in": "query",
            "description": "The excerpt for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
                "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
              },
              "description": "The excerpt for the post."
            }
          },
          {
            "name": "featured_media",
            "in": "query",
            "description": "The ID of the featured media for the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the featured media for the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The order of the post in relation to other posts.",
            "required": false,
            "schema": { "type": "integer", "description": "The order of the post in relation to other posts." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pages/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/page-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/media": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to items with particular parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to all items except those of a particular parent ID."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["inherit", "private", "trash"] },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "media_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular media type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to attachments of a particular media type.",
              "enum": ["image", "video", "text", "application", "audio"]
            }
          },
          {
            "name": "mime_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular MIME type.",
            "required": false,
            "schema": { "type": "string", "description": "Limit result set to attachments of a particular MIME type." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "alt_text",
            "in": "query",
            "description": "Alternative text to display when attachment is not displayed.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Alternative text to display when attachment is not displayed."
            }
          },
          {
            "name": "caption",
            "in": "query",
            "description": "The attachment caption.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Caption for the attachment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML caption for the attachment, transformed for display."
                }
              },
              "description": "The attachment caption."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The attachment description.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "string",
                  "description": "Description for the attachment, as it exists in the database."
                },
                "rendered": {
                  "type": "string",
                  "description": "HTML description for the attachment, transformed for display."
                }
              },
              "description": "The attachment description."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID for the associated post of the attachment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the associated post of the attachment." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "alt_text",
            "in": "query",
            "description": "Alternative text to display when attachment is not displayed.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Alternative text to display when attachment is not displayed."
            }
          },
          {
            "name": "caption",
            "in": "query",
            "description": "The attachment caption.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Caption for the attachment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML caption for the attachment, transformed for display."
                }
              },
              "description": "The attachment caption."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The attachment description.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "string",
                  "description": "Description for the attachment, as it exists in the database."
                },
                "rendered": {
                  "type": "string",
                  "description": "HTML description for the attachment, transformed for display."
                }
              },
              "description": "The attachment description."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID for the associated post of the attachment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the associated post of the attachment." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "alt_text",
            "in": "query",
            "description": "Alternative text to display when attachment is not displayed.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Alternative text to display when attachment is not displayed."
            }
          },
          {
            "name": "caption",
            "in": "query",
            "description": "The attachment caption.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Caption for the attachment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML caption for the attachment, transformed for display."
                }
              },
              "description": "The attachment caption."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The attachment description.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "string",
                  "description": "Description for the attachment, as it exists in the database."
                },
                "rendered": {
                  "type": "string",
                  "description": "HTML description for the attachment, transformed for display."
                }
              },
              "description": "The attachment description."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID for the associated post of the attachment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the associated post of the attachment." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the post.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the post." }
          },
          {
            "name": "comment_status",
            "in": "query",
            "description": "Whether or not comments are open on the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not comments are open on the post.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "ping_status",
            "in": "query",
            "description": "Whether or not the post can be pinged.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether or not the post can be pinged.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          },
          {
            "name": "alt_text",
            "in": "query",
            "description": "Alternative text to display when attachment is not displayed.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Alternative text to display when attachment is not displayed."
            }
          },
          {
            "name": "caption",
            "in": "query",
            "description": "The attachment caption.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Caption for the attachment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML caption for the attachment, transformed for display."
                }
              },
              "description": "The attachment caption."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The attachment description.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "string",
                  "description": "Description for the attachment, as it exists in the database."
                },
                "rendered": {
                  "type": "string",
                  "description": "HTML description for the attachment, transformed for display."
                }
              },
              "description": "The attachment description."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID for the associated post of the attachment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the associated post of the attachment." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/attachment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/media/{id}/post-process": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the attachment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the attachment." }
          },
          {
            "name": "action",
            "in": "query",
            "description": "",
            "required": true,
            "schema": { "type": "string", "enum": ["create-image-subsizes"] }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/media/{id}/edit": {
      "post": {
        "parameters": [
          {
            "name": "src",
            "in": "query",
            "description": "URL to the edited image file.",
            "required": true,
            "schema": { "type": "string", "format": "uri", "description": "URL to the edited image file." }
          },
          {
            "name": "modifiers",
            "in": "query",
            "description": "Array of image edits.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "object", "description": "Image edit." },
              "description": "Array of image edits."
            }
          },
          {
            "name": "rotation",
            "in": "query",
            "description": "The amount to rotate the image clockwise in degrees. DEPRECATED: Use `modifiers` instead.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The amount to rotate the image clockwise in degrees. DEPRECATED: Use `modifiers` instead."
            }
          },
          {
            "name": "x",
            "in": "query",
            "description": "As a percentage of the image, the x position to start the crop from. DEPRECATED: Use `modifiers` instead.",
            "required": false,
            "schema": {
              "type": "number",
              "description": "As a percentage of the image, the x position to start the crop from. DEPRECATED: Use `modifiers` instead."
            }
          },
          {
            "name": "y",
            "in": "query",
            "description": "As a percentage of the image, the y position to start the crop from. DEPRECATED: Use `modifiers` instead.",
            "required": false,
            "schema": {
              "type": "number",
              "description": "As a percentage of the image, the y position to start the crop from. DEPRECATED: Use `modifiers` instead."
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "As a percentage of the image, the width to crop the image to. DEPRECATED: Use `modifiers` instead.",
            "required": false,
            "schema": {
              "type": "number",
              "description": "As a percentage of the image, the width to crop the image to. DEPRECATED: Use `modifiers` instead."
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "As a percentage of the image, the height to crop the image to. DEPRECATED: Use `modifiers` instead.",
            "required": false,
            "schema": {
              "type": "number",
              "description": "As a percentage of the image, the height to crop the image to. DEPRECATED: Use `modifiers` instead."
            }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-items": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set based on relationship between multiple taxonomies.",
              "enum": ["AND", "OR"]
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." },
                    "operator": {
                      "type": "string",
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "enum": ["AND", "OR"]
                    }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items with specific terms assigned in the menus taxonomy."
            }
          },
          {
            "name": "menus_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                { "type": "array", "items": { "type": "integer" }, "description": "Match terms with the listed IDs." },
                {
                  "type": "object",
                  "properties": {
                    "terms": { "type": "array", "items": { "type": "integer" }, "description": "Term IDs." }
                  },
                  "description": "Perform an advanced term query."
                }
              ],
              "description": "Limit result set to items except those with specific terms assigned in the menus taxonomy."
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to posts with a specific menu_order value."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title for the object.",
            "required": false,
            "schema": { "type": ["string", "object"], "description": "The title for the object." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
              "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the object.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the object.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the object." }
          },
          {
            "name": "attr_title",
            "in": "query",
            "description": "Text for the title attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Text for the title attribute of the link element for this menu item."
            }
          },
          {
            "name": "classes",
            "in": "query",
            "description": "Class names for the link element of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Class names for the link element of this menu item."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of this menu item.",
            "required": false,
            "schema": { "type": "string", "description": "The description of this menu item." }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
            }
          },
          {
            "name": "object",
            "in": "query",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
            }
          },
          {
            "name": "object_id",
            "in": "query",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "The target attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The target attribute of the link element for this menu item.",
              "enum": ["_blank", ""]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which this menu item points.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." }
          },
          {
            "name": "xfn",
            "in": "query",
            "description": "The XFN relationship expressed in the link of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The XFN relationship expressed in the link of this menu item."
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "required": false,
            "schema": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-items/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the object.",
            "required": false,
            "schema": { "type": ["string", "object"], "description": "The title for the object." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
              "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the object.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the object.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the object." }
          },
          {
            "name": "attr_title",
            "in": "query",
            "description": "Text for the title attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Text for the title attribute of the link element for this menu item."
            }
          },
          {
            "name": "classes",
            "in": "query",
            "description": "Class names for the link element of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Class names for the link element of this menu item."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of this menu item.",
            "required": false,
            "schema": { "type": "string", "description": "The description of this menu item." }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
            }
          },
          {
            "name": "object",
            "in": "query",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
            }
          },
          {
            "name": "object_id",
            "in": "query",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "The target attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The target attribute of the link element for this menu item.",
              "enum": ["_blank", ""]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which this menu item points.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." }
          },
          {
            "name": "xfn",
            "in": "query",
            "description": "The XFN relationship expressed in the link of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The XFN relationship expressed in the link of this menu item."
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "required": false,
            "schema": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the object.",
            "required": false,
            "schema": { "type": ["string", "object"], "description": "The title for the object." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
              "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the object.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the object.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the object." }
          },
          {
            "name": "attr_title",
            "in": "query",
            "description": "Text for the title attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Text for the title attribute of the link element for this menu item."
            }
          },
          {
            "name": "classes",
            "in": "query",
            "description": "Class names for the link element of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Class names for the link element of this menu item."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of this menu item.",
            "required": false,
            "schema": { "type": "string", "description": "The description of this menu item." }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
            }
          },
          {
            "name": "object",
            "in": "query",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
            }
          },
          {
            "name": "object_id",
            "in": "query",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "The target attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The target attribute of the link element for this menu item.",
              "enum": ["_blank", ""]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which this menu item points.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." }
          },
          {
            "name": "xfn",
            "in": "query",
            "description": "The XFN relationship expressed in the link of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The XFN relationship expressed in the link of this menu item."
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "required": false,
            "schema": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the object.",
            "required": false,
            "schema": { "type": ["string", "object"], "description": "The title for the object." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
              "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the object.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the object.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the object." }
          },
          {
            "name": "attr_title",
            "in": "query",
            "description": "Text for the title attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Text for the title attribute of the link element for this menu item."
            }
          },
          {
            "name": "classes",
            "in": "query",
            "description": "Class names for the link element of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Class names for the link element of this menu item."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of this menu item.",
            "required": false,
            "schema": { "type": "string", "description": "The description of this menu item." }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
            }
          },
          {
            "name": "object",
            "in": "query",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
            }
          },
          {
            "name": "object_id",
            "in": "query",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "The target attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The target attribute of the link element for this menu item.",
              "enum": ["_blank", ""]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which this menu item points.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." }
          },
          {
            "name": "xfn",
            "in": "query",
            "description": "The XFN relationship expressed in the link of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The XFN relationship expressed in the link of this menu item."
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "required": false,
            "schema": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-items/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the object." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the object.",
            "required": false,
            "schema": { "type": ["string", "object"], "description": "The title for the object." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
              "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the object.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the object.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "attr_title",
            "in": "query",
            "description": "Text for the title attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Text for the title attribute of the link element for this menu item."
            }
          },
          {
            "name": "classes",
            "in": "query",
            "description": "Class names for the link element of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Class names for the link element of this menu item."
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of this menu item.",
            "required": false,
            "schema": { "type": "string", "description": "The description of this menu item." }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
            }
          },
          {
            "name": "object",
            "in": "query",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
            }
          },
          {
            "name": "object_id",
            "in": "query",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "The target attribute of the link element for this menu item.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The target attribute of the link element for this menu item.",
              "enum": ["_blank", ""]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which this menu item points.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." }
          },
          {
            "name": "xfn",
            "in": "query",
            "description": "The XFN relationship expressed in the link of this menu item.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The XFN relationship expressed in the link of this menu item."
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "required": false,
            "schema": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-items/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu_item-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": { "type": "string", "description": "The password for the post if it is password protected." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/blocks/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_block-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit to the specified post id." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": { "type": "string", "description": "Limit to the specified template part area." }
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": { "type": "string", "description": "Post type to get the templates for." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": true,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/templates/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit to the specified post id." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": { "type": "string", "description": "Limit to the specified template part area." }
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": { "type": "string", "description": "Post type to get the templates for." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": true,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Where the template part is intended for use (header, footer, etc.)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Where the template part is intended for use (header, footer, etc.)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Where the template part is intended for use (header, footer, etc.)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Where the template part is intended for use (header, footer, etc.)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifying the template.",
            "required": false,
            "schema": { "type": "string", "description": "Unique slug identifying the template." }
          },
          {
            "name": "theme",
            "in": "query",
            "description": "Theme identifier for the template.",
            "required": false,
            "schema": { "type": "string", "description": "Theme identifier for the template." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of template.",
            "required": false,
            "schema": { "type": "string", "description": "Type of template." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Content of template." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of template.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of template." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of template.",
            "required": false,
            "schema": { "type": "string", "description": "Description of template." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of template.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Status of template.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID for the author of the template.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the author of the template." }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Where the template part is intended for use (header, footer, etc.)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/template-parts/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/wp_template_part-revision" } }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": { "type": "string", "description": "The password for the post if it is password protected." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the post." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation/{parent}/revisions": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": ["date", "id", "include", "relevance", "slug", "include_slugs", "title"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation/{parent}/revisions/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the revision." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the revision." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as revisions do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as revisions do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation/{id}/autosaves": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the post was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the post was published, as GMT.",
            "required": false,
            "schema": {
              "type": ["string", "null"],
              "format": "date-time",
              "description": "The date the post was published, as GMT."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the post unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A named status for the post.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A named status for the post.",
              "enum": ["publish", "future", "draft", "pending", "private"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "A password to protect access to the content and excerpt.",
            "required": false,
            "schema": { "type": "string", "description": "A password to protect access to the content and excerpt." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
              },
              "description": "The title for the post."
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the post.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
                "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
                "block_version": {
                  "type": "integer",
                  "description": "Version of the content block format used by the post."
                },
                "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
              },
              "description": "The content for the post."
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The theme file to use to display the post.",
            "required": false,
            "schema": { "type": "string", "description": "The theme file to use to display the post." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/navigation/{parent}/autosaves/{id}": {
      "get": {
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the parent of the autosave." }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": { "type": "integer", "description": "The ID for the autosave." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_navigation-revision" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/types": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/types/{type}": {
      "get": {
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "An alphanumeric identifier for the post type.",
            "required": true,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the post type." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/statuses": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/status" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/statuses/{status}": {
      "get": {
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An alphanumeric identifier for the status.",
            "required": true,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the status." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/status" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/taxonomies": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to taxonomies associated with a specific post type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to taxonomies associated with a specific post type."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/taxonomy" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/taxonomies/{taxonomy}": {
      "get": {
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "description": "An alphanumeric identifier for the taxonomy.",
            "required": true,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the taxonomy." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/taxonomy" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/categories": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": ["id", "include", "name", "slug", "include_slugs", "term_group", "description", "count"]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to hide terms not assigned to any posts." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific parent.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit result set to terms assigned to a specific parent." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit result set to terms assigned to a specific post." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": true,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The parent term ID.",
            "required": false,
            "schema": { "type": "integer", "description": "The parent term ID." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The parent term ID.",
            "required": false,
            "schema": { "type": "integer", "description": "The parent term ID." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The parent term ID.",
            "required": false,
            "schema": { "type": "integer", "description": "The parent term ID." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The parent term ID.",
            "required": false,
            "schema": { "type": "integer", "description": "The parent term ID." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as terms do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as terms do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/tags": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": ["id", "include", "name", "slug", "include_slugs", "term_group", "description", "count"]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to hide terms not assigned to any posts." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit result set to terms assigned to a specific post." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": true,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as terms do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as terms do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/tag" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menus": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": ["id", "include", "name", "slug", "include_slugs", "term_group", "description", "count"]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to hide terms not assigned to any posts." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit result set to terms assigned to a specific post." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": true,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The locations assigned to the menu.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The locations assigned to the menu."
            }
          },
          {
            "name": "auto_add",
            "in": "query",
            "description": "Whether to automatically add top level pages to this menu.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to automatically add top level pages to this menu." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menus/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The locations assigned to the menu.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The locations assigned to the menu."
            }
          },
          {
            "name": "auto_add",
            "in": "query",
            "description": "Whether to automatically add top level pages to this menu.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to automatically add top level pages to this menu." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The locations assigned to the menu.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The locations assigned to the menu."
            }
          },
          {
            "name": "auto_add",
            "in": "query",
            "description": "Whether to automatically add top level pages to this menu.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to automatically add top level pages to this menu." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "HTML description of the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML description of the term." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "HTML title for the term.",
            "required": false,
            "schema": { "type": "string", "description": "HTML title for the term." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the term unique to its type.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The locations assigned to the menu.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The locations assigned to the menu."
            }
          },
          {
            "name": "auto_add",
            "in": "query",
            "description": "Whether to automatically add top level pages to this menu.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to automatically add top level pages to this menu." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the term." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as terms do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as terms do not support trashing." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/nav_menu" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by user attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by user attribute.",
              "enum": ["id", "include", "name", "registered_date", "slug", "include_slugs", "email", "url"]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to users with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to users with one or more specific slugs."
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Limit result set to users matching at least one specific role provided. Accepts csv list or single role.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to users matching at least one specific role provided. Accepts csv list or single role."
            }
          },
          {
            "name": "capabilities",
            "in": "query",
            "description": "Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability."
            }
          },
          {
            "name": "who",
            "in": "query",
            "description": "Limit result set to users who are considered authors.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to users who are considered authors.",
              "enum": ["authors"]
            }
          },
          {
            "name": "has_published_posts",
            "in": "query",
            "description": "Limit result set to users who have published posts.",
            "required": false,
            "schema": {
              "type": ["boolean", "array"],
              "description": "Limit result set to users who have published posts."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": true,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": true,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": true,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the user." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the user." }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the user." }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the user." }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the user." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as users do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as users do not support trashing." }
          },
          {
            "name": "reassign",
            "in": "query",
            "description": "Reassign the deleted user's posts and links to this user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Reassign the deleted user's posts and links to this user ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users/me": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Login name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Login name for the user." }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Display name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the user." }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "First name for the user." }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Last name for the user." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address for the user.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "The email address for the user." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the user.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL of the user." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the user.",
            "required": false,
            "schema": { "type": "string", "description": "Description of the user." }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for the user.",
            "required": false,
            "schema": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] }
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "The nickname for the user.",
            "required": false,
            "schema": { "type": "string", "description": "The nickname for the user." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "An alphanumeric identifier for the user.",
            "required": false,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the user." }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Roles assigned to the user.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the user (never included).",
            "required": false,
            "schema": { "type": "string", "description": "Password for the user (never included)." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Required to be true, as users do not support trashing.",
            "required": false,
            "schema": { "type": "boolean", "description": "Required to be true, as users do not support trashing." }
          },
          {
            "name": "reassign",
            "in": "query",
            "description": "Reassign the deleted user's posts and links to this user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Reassign the deleted user's posts and links to this user ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/user" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users/{user_id}/application-passwords": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "app_id",
            "in": "query",
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the application password.",
            "required": true,
            "schema": { "type": "string", "description": "The name of the application password." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users/{user_id}/application-passwords/introspect": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/users/{user_id}/application-passwords/{uuid}": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "app_id",
            "in": "query",
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the application password.",
            "required": false,
            "schema": { "type": "string", "description": "The name of the application password." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "app_id",
            "in": "query",
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the application password.",
            "required": false,
            "schema": { "type": "string", "description": "The name of the application password." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "app_id",
            "in": "query",
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the application password.",
            "required": false,
            "schema": { "type": "string", "description": "The name of the application password." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/application-password" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/comments": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to comments published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to comments published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to comments assigned to specific user IDs. Requires authorization."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes comments assigned to specific user IDs. Requires authorization."
            }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Limit result set to that from a specific author email. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "Limit result set to that from a specific author email. Requires authorization."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to comments published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to comments published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": { "type": "integer", "description": "Offset the result set by a specific number of items." }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by comment attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by comment attribute.",
              "enum": ["date", "date_gmt", "id", "include", "post", "parent", "type"]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to comments of specific parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to comments of specific parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Ensure result set excludes specific parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Ensure result set excludes specific parent IDs."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to comments assigned to specific post IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Limit result set to comments assigned to specific post IDs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to comments assigned a specific status. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to comments assigned a specific status. Requires authorization."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit result set to comments assigned a specific type. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to comments assigned a specific type. Requires authorization."
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": { "type": "string", "description": "The password for the post if it is password protected." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "The ID of the user object, if author was a user.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the user object, if author was a user." }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Email address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "Email address for the comment author." }
          },
          {
            "name": "author_ip",
            "in": "query",
            "description": "IP address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "ip", "description": "IP address for the comment author." }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Display name for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the comment author." }
          },
          {
            "name": "author_url",
            "in": "query",
            "description": "URL for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL for the comment author." }
          },
          {
            "name": "author_user_agent",
            "in": "query",
            "description": "User agent for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "User agent for the comment author." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the comment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the comment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML content for the comment, transformed for display."
                }
              },
              "description": "The content for the comment."
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the comment was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the comment was published, as GMT.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, as GMT."
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the comment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the comment." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID of the associated post object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the associated post object." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "State of the comment.",
            "required": false,
            "schema": { "type": "string", "description": "State of the comment." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the comment." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the parent post of the comment (if the post is password protected).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the parent post of the comment (if the post is password protected)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the comment." }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID of the user object, if author was a user.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the user object, if author was a user." }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Email address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "Email address for the comment author." }
          },
          {
            "name": "author_ip",
            "in": "query",
            "description": "IP address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "ip", "description": "IP address for the comment author." }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Display name for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the comment author." }
          },
          {
            "name": "author_url",
            "in": "query",
            "description": "URL for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL for the comment author." }
          },
          {
            "name": "author_user_agent",
            "in": "query",
            "description": "User agent for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "User agent for the comment author." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the comment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the comment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML content for the comment, transformed for display."
                }
              },
              "description": "The content for the comment."
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the comment was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the comment was published, as GMT.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, as GMT."
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the comment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the comment." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID of the associated post object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the associated post object." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "State of the comment.",
            "required": false,
            "schema": { "type": "string", "description": "State of the comment." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the comment." }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID of the user object, if author was a user.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the user object, if author was a user." }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Email address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "Email address for the comment author." }
          },
          {
            "name": "author_ip",
            "in": "query",
            "description": "IP address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "ip", "description": "IP address for the comment author." }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Display name for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the comment author." }
          },
          {
            "name": "author_url",
            "in": "query",
            "description": "URL for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL for the comment author." }
          },
          {
            "name": "author_user_agent",
            "in": "query",
            "description": "User agent for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "User agent for the comment author." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the comment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the comment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML content for the comment, transformed for display."
                }
              },
              "description": "The content for the comment."
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the comment was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the comment was published, as GMT.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, as GMT."
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the comment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the comment." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID of the associated post object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the associated post object." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "State of the comment.",
            "required": false,
            "schema": { "type": "string", "description": "State of the comment." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the comment." }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The ID of the user object, if author was a user.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the user object, if author was a user." }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Email address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "email", "description": "Email address for the comment author." }
          },
          {
            "name": "author_ip",
            "in": "query",
            "description": "IP address for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "ip", "description": "IP address for the comment author." }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Display name for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "Display name for the comment author." }
          },
          {
            "name": "author_url",
            "in": "query",
            "description": "URL for the comment author.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "URL for the comment author." }
          },
          {
            "name": "author_user_agent",
            "in": "query",
            "description": "User agent for the comment author.",
            "required": false,
            "schema": { "type": "string", "description": "User agent for the comment author." }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content for the comment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "raw": { "type": "string", "description": "Content for the comment, as it exists in the database." },
                "rendered": {
                  "type": "string",
                  "description": "HTML content for the comment, transformed for display."
                }
              },
              "description": "The content for the comment."
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the comment was published, in the site's timezone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, in the site's timezone."
            }
          },
          {
            "name": "date_gmt",
            "in": "query",
            "description": "The date the comment was published, as GMT.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The date the comment was published, as GMT."
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the comment.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID for the parent of the comment." }
          },
          {
            "name": "post",
            "in": "query",
            "description": "The ID of the associated post object.",
            "required": false,
            "schema": { "type": "integer", "description": "The ID of the associated post object." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "State of the comment.",
            "required": false,
            "schema": { "type": "string", "description": "State of the comment." }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Meta fields.",
            "required": false,
            "schema": { "type": "object", "description": "Meta fields." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": { "type": "integer", "description": "Unique identifier for the comment." }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to bypass Trash and force deletion.",
            "required": false,
            "schema": { "type": "boolean", "description": "Whether to bypass Trash and force deletion." }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the parent post of the comment (if the post is password protected).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the parent post of the comment (if the post is password protected)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/comment" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/search": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to items of an object type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to items of an object type.",
              "enum": ["post", "term", "post-format"]
            }
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Limit results to items of one or more object subtypes.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["post", "page", "category", "post_tag", "any"] },
              "description": "Limit results to items of one or more object subtypes."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/search-result" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-renderer/{name}": {
      "get": {
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": { "type": "string", "description": "Unique registered name for the block." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["edit"]
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "Attributes for the block.",
            "required": false,
            "schema": { "type": "object", "description": "Attributes for the block." }
          },
          {
            "name": "post_id",
            "in": "query",
            "description": "ID of the post context.",
            "required": false,
            "schema": { "type": "integer", "description": "ID of the post context." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/rendered-block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": { "type": "string", "description": "Unique registered name for the block." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["edit"]
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "Attributes for the block.",
            "required": false,
            "schema": { "type": "object", "description": "Attributes for the block." }
          },
          {
            "name": "post_id",
            "in": "query",
            "description": "ID of the post context.",
            "required": false,
            "schema": { "type": "integer", "description": "ID of the post context." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/rendered-block" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-types": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Block namespace.",
            "required": false,
            "schema": { "type": "string", "description": "Block namespace." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-types/{namespace}": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": { "type": "string", "description": "Block namespace." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-types/{namespace}/{name}": {
      "get": {
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Block name.",
            "required": true,
            "schema": { "type": "string", "description": "Block name." }
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": { "type": "string", "description": "Block namespace." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/global-styles/themes/{stylesheet}/variations": {
      "get": {
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": { "type": "string", "description": "The theme identifier" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/global-styles/themes/{stylesheet}": {
      "get": {
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": { "type": "string", "description": "The theme identifier" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/global-styles/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": { "type": "string", "description": "The id of a template" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_global_styles" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "styles",
            "in": "query",
            "description": "Global styles.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global styles." }
          },
          {
            "name": "settings",
            "in": "query",
            "description": "Global settings.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global settings." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the global styles variation.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of the global styles variation." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_global_styles" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "styles",
            "in": "query",
            "description": "Global styles.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global styles." }
          },
          {
            "name": "settings",
            "in": "query",
            "description": "Global settings.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global settings." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the global styles variation.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of the global styles variation." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_global_styles" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "styles",
            "in": "query",
            "description": "Global styles.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global styles." }
          },
          {
            "name": "settings",
            "in": "query",
            "description": "Global settings.",
            "required": false,
            "schema": { "type": ["object"], "description": "Global settings." }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the global styles variation.",
            "required": false,
            "schema": { "type": ["object", "string"], "description": "Title of the global styles variation." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/wp_global_styles" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/settings": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/settings" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Site title.",
            "required": false,
            "schema": { "type": "string", "description": "Site title." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Site tagline.",
            "required": false,
            "schema": { "type": "string", "description": "Site tagline." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Site URL.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "Site URL." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "This address is used for admin purposes, like new user notification.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "This address is used for admin purposes, like new user notification."
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "A city in the same timezone as you.",
            "required": false,
            "schema": { "type": "string", "description": "A city in the same timezone as you." }
          },
          {
            "name": "date_format",
            "in": "query",
            "description": "A date format for all date strings.",
            "required": false,
            "schema": { "type": "string", "description": "A date format for all date strings." }
          },
          {
            "name": "time_format",
            "in": "query",
            "description": "A time format for all time strings.",
            "required": false,
            "schema": { "type": "string", "description": "A time format for all time strings." }
          },
          {
            "name": "start_of_week",
            "in": "query",
            "description": "A day number of the week that the week should start on.",
            "required": false,
            "schema": { "type": "integer", "description": "A day number of the week that the week should start on." }
          },
          {
            "name": "language",
            "in": "query",
            "description": "WordPress locale code.",
            "required": false,
            "schema": { "type": "string", "description": "WordPress locale code." }
          },
          {
            "name": "use_smilies",
            "in": "query",
            "description": "Convert emoticons like :-) and :-P to graphics on display.",
            "required": false,
            "schema": { "type": "boolean", "description": "Convert emoticons like :-) and :-P to graphics on display." }
          },
          {
            "name": "default_category",
            "in": "query",
            "description": "Default post category.",
            "required": false,
            "schema": { "type": "integer", "description": "Default post category." }
          },
          {
            "name": "default_post_format",
            "in": "query",
            "description": "Default post format.",
            "required": false,
            "schema": { "type": "string", "description": "Default post format." }
          },
          {
            "name": "posts_per_page",
            "in": "query",
            "description": "Blog pages show at most.",
            "required": false,
            "schema": { "type": "integer", "description": "Blog pages show at most." }
          },
          {
            "name": "default_ping_status",
            "in": "query",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "default_comment_status",
            "in": "query",
            "description": "Allow people to submit comments on new posts.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow people to submit comments on new posts.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "site_logo",
            "in": "query",
            "description": "Site logo.",
            "required": false,
            "schema": { "type": "integer", "description": "Site logo." }
          },
          {
            "name": "site_icon",
            "in": "query",
            "description": "Site icon.",
            "required": false,
            "schema": { "type": "integer", "description": "Site icon." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/settings" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Site title.",
            "required": false,
            "schema": { "type": "string", "description": "Site title." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Site tagline.",
            "required": false,
            "schema": { "type": "string", "description": "Site tagline." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Site URL.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "Site URL." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "This address is used for admin purposes, like new user notification.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "This address is used for admin purposes, like new user notification."
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "A city in the same timezone as you.",
            "required": false,
            "schema": { "type": "string", "description": "A city in the same timezone as you." }
          },
          {
            "name": "date_format",
            "in": "query",
            "description": "A date format for all date strings.",
            "required": false,
            "schema": { "type": "string", "description": "A date format for all date strings." }
          },
          {
            "name": "time_format",
            "in": "query",
            "description": "A time format for all time strings.",
            "required": false,
            "schema": { "type": "string", "description": "A time format for all time strings." }
          },
          {
            "name": "start_of_week",
            "in": "query",
            "description": "A day number of the week that the week should start on.",
            "required": false,
            "schema": { "type": "integer", "description": "A day number of the week that the week should start on." }
          },
          {
            "name": "language",
            "in": "query",
            "description": "WordPress locale code.",
            "required": false,
            "schema": { "type": "string", "description": "WordPress locale code." }
          },
          {
            "name": "use_smilies",
            "in": "query",
            "description": "Convert emoticons like :-) and :-P to graphics on display.",
            "required": false,
            "schema": { "type": "boolean", "description": "Convert emoticons like :-) and :-P to graphics on display." }
          },
          {
            "name": "default_category",
            "in": "query",
            "description": "Default post category.",
            "required": false,
            "schema": { "type": "integer", "description": "Default post category." }
          },
          {
            "name": "default_post_format",
            "in": "query",
            "description": "Default post format.",
            "required": false,
            "schema": { "type": "string", "description": "Default post format." }
          },
          {
            "name": "posts_per_page",
            "in": "query",
            "description": "Blog pages show at most.",
            "required": false,
            "schema": { "type": "integer", "description": "Blog pages show at most." }
          },
          {
            "name": "default_ping_status",
            "in": "query",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "default_comment_status",
            "in": "query",
            "description": "Allow people to submit comments on new posts.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow people to submit comments on new posts.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "site_logo",
            "in": "query",
            "description": "Site logo.",
            "required": false,
            "schema": { "type": "integer", "description": "Site logo." }
          },
          {
            "name": "site_icon",
            "in": "query",
            "description": "Site icon.",
            "required": false,
            "schema": { "type": "integer", "description": "Site icon." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/settings" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Site title.",
            "required": false,
            "schema": { "type": "string", "description": "Site title." }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Site tagline.",
            "required": false,
            "schema": { "type": "string", "description": "Site tagline." }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Site URL.",
            "required": false,
            "schema": { "type": "string", "format": "uri", "description": "Site URL." }
          },
          {
            "name": "email",
            "in": "query",
            "description": "This address is used for admin purposes, like new user notification.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "This address is used for admin purposes, like new user notification."
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "A city in the same timezone as you.",
            "required": false,
            "schema": { "type": "string", "description": "A city in the same timezone as you." }
          },
          {
            "name": "date_format",
            "in": "query",
            "description": "A date format for all date strings.",
            "required": false,
            "schema": { "type": "string", "description": "A date format for all date strings." }
          },
          {
            "name": "time_format",
            "in": "query",
            "description": "A time format for all time strings.",
            "required": false,
            "schema": { "type": "string", "description": "A time format for all time strings." }
          },
          {
            "name": "start_of_week",
            "in": "query",
            "description": "A day number of the week that the week should start on.",
            "required": false,
            "schema": { "type": "integer", "description": "A day number of the week that the week should start on." }
          },
          {
            "name": "language",
            "in": "query",
            "description": "WordPress locale code.",
            "required": false,
            "schema": { "type": "string", "description": "WordPress locale code." }
          },
          {
            "name": "use_smilies",
            "in": "query",
            "description": "Convert emoticons like :-) and :-P to graphics on display.",
            "required": false,
            "schema": { "type": "boolean", "description": "Convert emoticons like :-) and :-P to graphics on display." }
          },
          {
            "name": "default_category",
            "in": "query",
            "description": "Default post category.",
            "required": false,
            "schema": { "type": "integer", "description": "Default post category." }
          },
          {
            "name": "default_post_format",
            "in": "query",
            "description": "Default post format.",
            "required": false,
            "schema": { "type": "string", "description": "Default post format." }
          },
          {
            "name": "posts_per_page",
            "in": "query",
            "description": "Blog pages show at most.",
            "required": false,
            "schema": { "type": "integer", "description": "Blog pages show at most." }
          },
          {
            "name": "default_ping_status",
            "in": "query",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "default_comment_status",
            "in": "query",
            "description": "Allow people to submit comments on new posts.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allow people to submit comments on new posts.",
              "enum": ["open", "closed"]
            }
          },
          {
            "name": "site_logo",
            "in": "query",
            "description": "Site logo.",
            "required": false,
            "schema": { "type": "integer", "description": "Site logo." }
          },
          {
            "name": "site_icon",
            "in": "query",
            "description": "Site icon.",
            "required": false,
            "schema": { "type": "integer", "description": "Site icon." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/settings" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/themes": {
      "get": {
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to themes assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["active", "inactive"] },
              "description": "Limit result set to themes assigned one or more statuses."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/theme" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/themes/{stylesheet}": {
      "get": {
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme's stylesheet. This uniquely identifies the theme.",
            "required": true,
            "schema": { "type": "string", "description": "The theme's stylesheet. This uniquely identifies the theme." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/theme" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/plugins": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limits results to plugins with the given status.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["inactive", "active"] },
              "description": "Limits results to plugins with the given status."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "WordPress.org plugin directory slug.",
            "required": true,
            "schema": { "type": "string", "description": "WordPress.org plugin directory slug." }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The plugin activation status.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The plugin activation status.",
              "enum": ["inactive", "active"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/plugins/{plugin}": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          { "name": "plugin", "in": "path", "description": "", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          { "name": "plugin", "in": "path", "description": "", "required": true, "schema": { "type": "string" } },
          {
            "name": "status",
            "in": "query",
            "description": "The plugin activation status.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The plugin activation status.",
              "enum": ["inactive", "active"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          { "name": "plugin", "in": "path", "description": "", "required": true, "schema": { "type": "string" } },
          {
            "name": "status",
            "in": "query",
            "description": "The plugin activation status.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The plugin activation status.",
              "enum": ["inactive", "active"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          { "name": "plugin", "in": "path", "description": "", "required": true, "schema": { "type": "string" } },
          {
            "name": "status",
            "in": "query",
            "description": "The plugin activation status.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The plugin activation status.",
              "enum": ["inactive", "active"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          { "name": "plugin", "in": "path", "description": "", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/plugin" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/sidebars": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/sidebar" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/sidebars/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a registered sidebar",
            "required": true,
            "schema": { "type": "string", "description": "The id of a registered sidebar" }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/sidebar" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "widgets",
            "in": "query",
            "description": "Nested widgets.",
            "required": false,
            "schema": { "type": "array", "items": { "type": ["object", "string"] }, "description": "Nested widgets." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/sidebar" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "widgets",
            "in": "query",
            "description": "Nested widgets.",
            "required": false,
            "schema": { "type": "array", "items": { "type": ["object", "string"] }, "description": "Nested widgets." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/sidebar" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "widgets",
            "in": "query",
            "description": "Nested widgets.",
            "required": false,
            "schema": { "type": "array", "items": { "type": ["object", "string"] }, "description": "Nested widgets." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/sidebar" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widget-types": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget-type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widget-types/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": { "type": "string", "description": "The widget type id." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget-type" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widget-types/{id}/encode": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": { "type": "string", "description": "The widget type id." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Current instance settings of the widget.",
            "required": false,
            "schema": { "type": "object", "description": "Current instance settings of the widget." }
          },
          {
            "name": "form_data",
            "in": "query",
            "description": "Serialized widget form data to encode into instance settings.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Serialized widget form data to encode into instance settings."
            }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widget-types/{id}/render": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": { "type": "string", "description": "The widget type id." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Current instance settings of the widget.",
            "required": false,
            "schema": { "type": "object", "description": "Current instance settings of the widget." }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widgets": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar to return widgets for.",
            "required": false,
            "schema": { "type": "string", "description": "The sidebar to return widgets for." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the widget.",
            "required": false,
            "schema": { "type": "string", "description": "Unique identifier for the widget." }
          },
          {
            "name": "id_base",
            "in": "query",
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar the widget belongs to.",
            "required": true,
            "schema": { "type": "string", "description": "The sidebar the widget belongs to." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Instance settings of the widget, if supported.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "encoded": {
                  "type": "string",
                  "description": "Base64 encoded representation of the instance settings."
                },
                "hash": { "type": "string", "description": "Cryptographic hash of the instance settings." },
                "raw": { "type": "object", "description": "Unencoded instance settings, if supported." }
              },
              "description": "Instance settings of the widget, if supported."
            }
          },
          {
            "name": "form_data",
            "in": "query",
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/widgets/{id}": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": { "type": "string", "description": "Unique identifier for the widget." }
          },
          {
            "name": "id_base",
            "in": "query",
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar the widget belongs to.",
            "required": false,
            "schema": { "type": "string", "description": "The sidebar the widget belongs to." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Instance settings of the widget, if supported.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "encoded": {
                  "type": "string",
                  "description": "Base64 encoded representation of the instance settings."
                },
                "hash": { "type": "string", "description": "Cryptographic hash of the instance settings." },
                "raw": { "type": "object", "description": "Unencoded instance settings, if supported." }
              },
              "description": "Instance settings of the widget, if supported."
            }
          },
          {
            "name": "form_data",
            "in": "query",
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": { "type": "string", "description": "Unique identifier for the widget." }
          },
          {
            "name": "id_base",
            "in": "query",
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar the widget belongs to.",
            "required": false,
            "schema": { "type": "string", "description": "The sidebar the widget belongs to." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Instance settings of the widget, if supported.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "encoded": {
                  "type": "string",
                  "description": "Base64 encoded representation of the instance settings."
                },
                "hash": { "type": "string", "description": "Cryptographic hash of the instance settings." },
                "raw": { "type": "object", "description": "Unencoded instance settings, if supported." }
              },
              "description": "Instance settings of the widget, if supported."
            }
          },
          {
            "name": "form_data",
            "in": "query",
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": { "type": "string", "description": "Unique identifier for the widget." }
          },
          {
            "name": "id_base",
            "in": "query",
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar the widget belongs to.",
            "required": false,
            "schema": { "type": "string", "description": "The sidebar the widget belongs to." }
          },
          {
            "name": "instance",
            "in": "query",
            "description": "Instance settings of the widget, if supported.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "encoded": {
                  "type": "string",
                  "description": "Base64 encoded representation of the instance settings."
                },
                "hash": { "type": "string", "description": "Cryptographic hash of the instance settings." },
                "raw": { "type": "object", "description": "Unencoded instance settings, if supported." }
              },
              "description": "Instance settings of the widget, if supported."
            }
          },
          {
            "name": "form_data",
            "in": "query",
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Whether to force removal of the widget, or move it to the inactive sidebar.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to force removal of the widget, or move it to the inactive sidebar."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/widget" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-directory/search": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": { "type": "integer", "description": "Current page of the collection." }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": { "type": "integer", "description": "Maximum number of items to be returned in result set." }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Limit result set to blocks matching the search term.",
            "required": true,
            "schema": { "type": "string", "description": "Limit result set to blocks matching the search term." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-directory-item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/pattern-directory/patterns": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": { "type": "string", "description": "Limit results to those matching a string." }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Limit results to those matching a category ID.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit results to those matching a category ID." }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Limit results to those matching a keyword ID.",
            "required": false,
            "schema": { "type": "integer", "description": "Limit results to those matching a keyword ID." }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit results to those matching a pattern (slug).",
            "required": false,
            "schema": { "type": "array", "description": "Limit results to those matching a pattern (slug)." }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/pattern-directory-item" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-patterns/patterns": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-pattern" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/block-patterns/categories": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/block-pattern-category" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-locations": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/menu-location" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/menu-locations/{location}": {
      "get": {
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "description": "An alphanumeric identifier for the menu location.",
            "required": true,
            "schema": { "type": "string", "description": "An alphanumeric identifier for the menu location." }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": ["view", "embed", "edit"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/menu-location" } } }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" }
        }
      }
    }
  },
  "security": [],
  "components": {
    "schemas": {
      "post": {
        "type": "object",
        "properties": {
          "date": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, in the site's timezone."
          },
          "date_gmt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the post." },
          "link": { "type": "string", "format": "uri", "description": "URL to the post." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, as GMT."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." },
          "status": {
            "type": "string",
            "description": "A named status for the post.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "type": { "type": "string", "description": "Type of post." },
          "password": { "type": "string", "description": "A password to protect access to the content and excerpt." },
          "permalink_template": { "type": "string", "description": "Permalink template for the post." },
          "generated_slug": { "type": "string", "description": "Slug automatically generated from the post title." },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "author": { "type": "integer", "description": "The ID for the author of the post." },
          "excerpt": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
              "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
            },
            "description": "The excerpt for the post."
          },
          "featured_media": { "type": "integer", "description": "The ID of the featured media for the post." },
          "comment_status": {
            "type": "string",
            "description": "Whether or not comments are open on the post.",
            "enum": ["open", "closed"]
          },
          "ping_status": {
            "type": "string",
            "description": "Whether or not the post can be pinged.",
            "enum": ["open", "closed"]
          },
          "format": {
            "type": "string",
            "description": "The format for the post.",
            "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
          },
          "meta": { "type": "object", "description": "Meta fields." },
          "sticky": { "type": "boolean", "description": "Whether or not the post should be treated as sticky." },
          "template": { "type": "string", "description": "The theme file to use to display the post." },
          "categories": {
            "type": "array",
            "items": { "type": "integer" },
            "description": "The terms assigned to the post in the category taxonomy."
          },
          "tags": {
            "type": "array",
            "items": { "type": "integer" },
            "description": "The terms assigned to the post in the post_tag taxonomy."
          }
        }
      },
      "post-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "excerpt": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
              "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
            },
            "description": "The excerpt for the post."
          },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "page": {
        "type": "object",
        "properties": {
          "date": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, in the site's timezone."
          },
          "date_gmt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the post." },
          "link": { "type": "string", "format": "uri", "description": "URL to the post." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, as GMT."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." },
          "status": {
            "type": "string",
            "description": "A named status for the post.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "type": { "type": "string", "description": "Type of post." },
          "password": { "type": "string", "description": "A password to protect access to the content and excerpt." },
          "permalink_template": { "type": "string", "description": "Permalink template for the post." },
          "generated_slug": { "type": "string", "description": "Slug automatically generated from the post title." },
          "parent": { "type": "integer", "description": "The ID for the parent of the post." },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "author": { "type": "integer", "description": "The ID for the author of the post." },
          "excerpt": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
              "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
            },
            "description": "The excerpt for the post."
          },
          "featured_media": { "type": "integer", "description": "The ID of the featured media for the post." },
          "comment_status": {
            "type": "string",
            "description": "Whether or not comments are open on the post.",
            "enum": ["open", "closed"]
          },
          "ping_status": {
            "type": "string",
            "description": "Whether or not the post can be pinged.",
            "enum": ["open", "closed"]
          },
          "menu_order": { "type": "integer", "description": "The order of the post in relation to other posts." },
          "meta": { "type": "object", "description": "Meta fields." },
          "template": { "type": "string", "description": "The theme file to use to display the post." }
        }
      },
      "page-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "excerpt": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Excerpt for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML excerpt for the post, transformed for display." },
              "protected": { "type": "boolean", "description": "Whether the excerpt is protected with a password." }
            },
            "description": "The excerpt for the post."
          },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "attachment": {
        "type": "object",
        "properties": {
          "date": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, in the site's timezone."
          },
          "date_gmt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the post." },
          "link": { "type": "string", "format": "uri", "description": "URL to the post." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, as GMT."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." },
          "status": {
            "type": "string",
            "description": "A named status for the post.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "type": { "type": "string", "description": "Type of post." },
          "permalink_template": { "type": "string", "description": "Permalink template for the post." },
          "generated_slug": { "type": "string", "description": "Slug automatically generated from the post title." },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "author": { "type": "integer", "description": "The ID for the author of the post." },
          "comment_status": {
            "type": "string",
            "description": "Whether or not comments are open on the post.",
            "enum": ["open", "closed"]
          },
          "ping_status": {
            "type": "string",
            "description": "Whether or not the post can be pinged.",
            "enum": ["open", "closed"]
          },
          "meta": { "type": "object", "description": "Meta fields." },
          "template": { "type": "string", "description": "The theme file to use to display the post." },
          "alt_text": {
            "type": "string",
            "description": "Alternative text to display when attachment is not displayed."
          },
          "caption": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Caption for the attachment, as it exists in the database." },
              "rendered": {
                "type": "string",
                "description": "HTML caption for the attachment, transformed for display."
              }
            },
            "description": "The attachment caption."
          },
          "description": {
            "type": "object",
            "properties": {
              "raw": {
                "type": "string",
                "description": "Description for the attachment, as it exists in the database."
              },
              "rendered": {
                "type": "string",
                "description": "HTML description for the attachment, transformed for display."
              }
            },
            "description": "The attachment description."
          },
          "media_type": { "type": "string", "description": "Attachment type.", "enum": ["image", "file"] },
          "mime_type": { "type": "string", "description": "The attachment MIME type." },
          "media_details": { "type": "object", "description": "Details about the media file, specific to its type." },
          "post": { "type": "integer", "description": "The ID for the associated post of the attachment." },
          "source_url": { "type": "string", "format": "uri", "description": "URL to the original attachment file." },
          "missing_image_sizes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of the missing image sizes of the attachment."
          }
        }
      },
      "nav_menu_item": {
        "type": "object",
        "properties": {
          "title": { "type": ["string", "object"], "description": "The title for the object." },
          "id": { "type": "integer", "description": "Unique identifier for the object." },
          "type_label": {
            "type": "string",
            "description": "The singular label used to describe this type of menu item."
          },
          "type": {
            "type": "string",
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "enum": ["taxonomy", "post_type", "post_type_archive", "custom"]
          },
          "status": {
            "type": "string",
            "description": "A named status for the object.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the object." },
          "attr_title": {
            "type": "string",
            "description": "Text for the title attribute of the link element for this menu item."
          },
          "classes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Class names for the link element of this menu item."
          },
          "description": { "type": "string", "description": "The description of this menu item." },
          "menu_order": {
            "type": "integer",
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
          },
          "object": {
            "type": "string",
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
          },
          "object_id": {
            "type": "integer",
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
          },
          "target": {
            "type": "string",
            "description": "The target attribute of the link element for this menu item.",
            "enum": ["_blank", ""]
          },
          "url": { "type": "string", "format": "uri", "description": "The URL to which this menu item points." },
          "xfn": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The XFN relationship expressed in the link of this menu item."
          },
          "invalid": {
            "type": "boolean",
            "description": "Whether the menu item represents an object that no longer exists."
          },
          "menus": { "type": "integer", "description": "The terms assigned to the object in the nav_menu taxonomy." },
          "meta": { "type": "object", "description": "Meta fields." }
        }
      },
      "nav_menu_item-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": { "type": "string", "description": "GUID for the revision, as it exists in the database." },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": { "type": ["string", "object"], "description": "The title for the object." },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "wp_block": {
        "type": "object",
        "properties": {
          "date": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, in the site's timezone."
          },
          "date_gmt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the post." },
          "link": { "type": "string", "format": "uri", "description": "URL to the post." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, as GMT."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." },
          "status": {
            "type": "string",
            "description": "A named status for the post.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "type": { "type": "string", "description": "Type of post." },
          "password": { "type": "string", "description": "A password to protect access to the content and excerpt." },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "template": { "type": "string", "description": "The theme file to use to display the post." }
        }
      },
      "wp_block-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "wp_template": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of template." },
          "slug": { "type": "string", "description": "Unique slug identifying the template." },
          "theme": { "type": "string", "description": "Theme identifier for the template." },
          "type": { "type": "string", "description": "Type of template." },
          "source": { "type": "string", "description": "Source of template" },
          "origin": { "type": "string", "description": "Source of a customized template" },
          "content": { "type": ["object", "string"], "description": "Content of template." },
          "title": { "type": ["object", "string"], "description": "Title of template." },
          "description": { "type": "string", "description": "Description of template." },
          "status": {
            "type": "string",
            "description": "Status of template.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "wp_id": { "type": "integer", "description": "Post ID." },
          "has_theme_file": { "type": "bool", "description": "Theme file exists." },
          "author": { "type": "integer", "description": "The ID for the author of the template." },
          "is_custom": { "type": "bool", "description": "Whether a template is a custom template." }
        },
        "required": ["slug"]
      },
      "wp_template-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": { "type": "string", "description": "GUID for the revision, as it exists in the database." },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": { "type": ["object", "string"], "description": "Title of template." },
          "content": { "type": ["object", "string"], "description": "Content of template." },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "wp_template_part": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of template." },
          "slug": { "type": "string", "description": "Unique slug identifying the template." },
          "theme": { "type": "string", "description": "Theme identifier for the template." },
          "type": { "type": "string", "description": "Type of template." },
          "source": { "type": "string", "description": "Source of template" },
          "origin": { "type": "string", "description": "Source of a customized template" },
          "content": { "type": ["object", "string"], "description": "Content of template." },
          "title": { "type": ["object", "string"], "description": "Title of template." },
          "description": { "type": "string", "description": "Description of template." },
          "status": {
            "type": "string",
            "description": "Status of template.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "wp_id": { "type": "integer", "description": "Post ID." },
          "has_theme_file": { "type": "bool", "description": "Theme file exists." },
          "author": { "type": "integer", "description": "The ID for the author of the template." },
          "area": {
            "type": "string",
            "description": "Where the template part is intended for use (header, footer, etc.)"
          }
        },
        "required": ["slug"]
      },
      "wp_template_part-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": { "type": "string", "description": "GUID for the revision, as it exists in the database." },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": { "type": ["object", "string"], "description": "Title of template." },
          "content": { "type": ["object", "string"], "description": "Content of template." },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "wp_navigation": {
        "type": "object",
        "properties": {
          "date": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, in the site's timezone."
          },
          "date_gmt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The date the post was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the post." },
          "link": { "type": "string", "format": "uri", "description": "URL to the post." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the post was last modified, as GMT."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post unique to its type." },
          "status": {
            "type": "string",
            "description": "A named status for the post.",
            "enum": ["publish", "future", "draft", "pending", "private"]
          },
          "type": { "type": "string", "description": "Type of post." },
          "password": { "type": "string", "description": "A password to protect access to the content and excerpt." },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "template": { "type": "string", "description": "The theme file to use to display the post." }
        }
      },
      "wp_navigation-revision": {
        "type": "object",
        "properties": {
          "author": { "type": "integer", "description": "The ID for the author of the revision." },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was published, as GMT."
          },
          "guid": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "GUID for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "GUID for the post, transformed for display." }
            },
            "description": "The globally unique identifier for the post."
          },
          "id": { "type": "integer", "description": "Unique identifier for the revision." },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, in the site's timezone."
          },
          "modified_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the revision was last modified, as GMT."
          },
          "parent": { "type": "integer", "description": "The ID for the parent of the revision." },
          "slug": {
            "type": "string",
            "description": "An alphanumeric identifier for the revision unique to its type."
          },
          "title": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Title for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML title for the post, transformed for display." }
            },
            "description": "The title for the post."
          },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the post, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the post, transformed for display." },
              "block_version": {
                "type": "integer",
                "description": "Version of the content block format used by the post."
              },
              "protected": { "type": "boolean", "description": "Whether the content is protected with a password." }
            },
            "description": "The content for the post."
          },
          "preview_link": { "type": "string", "format": "uri", "description": "Preview link for the post." }
        }
      },
      "type": {
        "type": "object",
        "properties": {
          "capabilities": { "type": "object", "description": "All capabilities used by the post type." },
          "description": { "type": "string", "description": "A human-readable description of the post type." },
          "hierarchical": { "type": "boolean", "description": "Whether or not the post type should have children." },
          "viewable": { "type": "boolean", "description": "Whether or not the post type can be viewed." },
          "labels": {
            "type": "object",
            "description": "Human-readable labels for the post type for various contexts."
          },
          "name": { "type": "string", "description": "The title for the post type." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the post type." },
          "supports": { "type": "object", "description": "All features, supported by the post type." },
          "taxonomies": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Taxonomies associated with post type."
          },
          "rest_base": { "type": "string", "description": "REST base route for the post type." },
          "rest_namespace": { "type": "string", "description": "REST route's namespace for the post type." },
          "visibility": {
            "type": "object",
            "properties": {
              "show_ui": {
                "type": "boolean",
                "description": "Whether to generate a default UI for managing this post type."
              },
              "show_in_nav_menus": {
                "type": "boolean",
                "description": "Whether to make the post type available for selection in navigation menus."
              }
            },
            "description": "The visibility settings for the post type."
          }
        }
      },
      "status": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The title for the status." },
          "private": { "type": "boolean", "description": "Whether posts with this status should be private." },
          "protected": { "type": "boolean", "description": "Whether posts with this status should be protected." },
          "public": {
            "type": "boolean",
            "description": "Whether posts of this status should be shown in the front end of the site."
          },
          "queryable": {
            "type": "boolean",
            "description": "Whether posts with this status should be publicly-queryable."
          },
          "show_in_list": {
            "type": "boolean",
            "description": "Whether to include posts in the edit listing for their post type."
          },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the status." },
          "date_floating": {
            "type": "boolean",
            "description": "Whether posts of this status may have floating published dates."
          }
        }
      },
      "taxonomy": {
        "type": "object",
        "properties": {
          "capabilities": { "type": "object", "description": "All capabilities used by the taxonomy." },
          "description": { "type": "string", "description": "A human-readable description of the taxonomy." },
          "hierarchical": { "type": "boolean", "description": "Whether or not the taxonomy should have children." },
          "labels": { "type": "object", "description": "Human-readable labels for the taxonomy for various contexts." },
          "name": { "type": "string", "description": "The title for the taxonomy." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the taxonomy." },
          "show_cloud": { "type": "boolean", "description": "Whether or not the term cloud should be displayed." },
          "types": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Types associated with the taxonomy."
          },
          "rest_base": { "type": "string", "description": "REST base route for the taxonomy." },
          "rest_namespace": { "type": "string", "description": "REST namespace route for the taxonomy." },
          "visibility": {
            "type": "object",
            "properties": {
              "public": {
                "type": "boolean",
                "description": "Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users."
              },
              "publicly_queryable": { "type": "boolean", "description": "Whether the taxonomy is publicly queryable." },
              "show_ui": {
                "type": "boolean",
                "description": "Whether to generate a default UI for managing this taxonomy."
              },
              "show_admin_column": {
                "type": "boolean",
                "description": "Whether to allow automatic creation of taxonomy columns on associated post-types table."
              },
              "show_in_nav_menus": {
                "type": "boolean",
                "description": "Whether to make the taxonomy available for selection in navigation menus."
              },
              "show_in_quick_edit": {
                "type": "boolean",
                "description": "Whether to show the taxonomy in the quick/bulk edit panel."
              }
            },
            "description": "The visibility settings for the taxonomy."
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Unique identifier for the term." },
          "count": { "type": "integer", "description": "Number of published posts for the term." },
          "description": { "type": "string", "description": "HTML description of the term." },
          "link": { "type": "string", "format": "uri", "description": "URL of the term." },
          "name": { "type": "string", "description": "HTML title for the term." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." },
          "taxonomy": { "type": "string", "description": "Type attribution for the term.", "enum": ["category"] },
          "parent": { "type": "integer", "description": "The parent term ID." },
          "meta": { "type": "object", "description": "Meta fields." }
        },
        "required": ["name"]
      },
      "tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Unique identifier for the term." },
          "count": { "type": "integer", "description": "Number of published posts for the term." },
          "description": { "type": "string", "description": "HTML description of the term." },
          "link": { "type": "string", "format": "uri", "description": "URL of the term." },
          "name": { "type": "string", "description": "HTML title for the term." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." },
          "taxonomy": { "type": "string", "description": "Type attribution for the term.", "enum": ["post_tag"] },
          "meta": { "type": "object", "description": "Meta fields." }
        },
        "required": ["name"]
      },
      "nav_menu": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Unique identifier for the term." },
          "description": { "type": "string", "description": "HTML description of the term." },
          "name": { "type": "string", "description": "HTML title for the term." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the term unique to its type." },
          "meta": { "type": "object", "description": "Meta fields." },
          "locations": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The locations assigned to the menu."
          },
          "auto_add": { "type": "boolean", "description": "Whether to automatically add top level pages to this menu." }
        },
        "required": ["name"]
      },
      "user": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Unique identifier for the user." },
          "username": { "type": "string", "description": "Login name for the user." },
          "name": { "type": "string", "description": "Display name for the user." },
          "first_name": { "type": "string", "description": "First name for the user." },
          "last_name": { "type": "string", "description": "Last name for the user." },
          "email": { "type": "string", "format": "email", "description": "The email address for the user." },
          "url": { "type": "string", "format": "uri", "description": "URL of the user." },
          "description": { "type": "string", "description": "Description of the user." },
          "link": { "type": "string", "format": "uri", "description": "Author URL of the user." },
          "locale": { "type": "string", "description": "Locale for the user.", "enum": ["", "en_US"] },
          "nickname": { "type": "string", "description": "The nickname for the user." },
          "slug": { "type": "string", "description": "An alphanumeric identifier for the user." },
          "registered_date": {
            "type": "string",
            "format": "date-time",
            "description": "Registration date for the user."
          },
          "roles": { "type": "array", "items": { "type": "string" }, "description": "Roles assigned to the user." },
          "password": { "type": "string", "description": "Password for the user (never included)." },
          "capabilities": { "type": "object", "description": "All capabilities assigned to the user." },
          "extra_capabilities": { "type": "object", "description": "Any extra capabilities assigned to the user." },
          "avatar_urls": {
            "type": "object",
            "properties": {
              "24": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 24 pixels." },
              "48": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 48 pixels." },
              "96": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 96 pixels." }
            },
            "description": "Avatar URLs for the user."
          },
          "meta": { "type": "object", "description": "Meta fields." }
        },
        "required": ["username", "email", "password"]
      },
      "application-password": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the application password."
          },
          "app_id": {
            "type": "string",
            "format": "uuid",
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
          },
          "name": { "type": "string", "description": "The name of the application password." },
          "password": {
            "type": "string",
            "description": "The generated password. Only available after adding an application."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The GMT date the application password was created."
          },
          "last_used": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "The GMT date the application password was last used."
          },
          "last_ip": {
            "type": ["string", "null"],
            "format": "ip",
            "description": "The IP address the application password was last used by."
          }
        },
        "required": ["name"]
      },
      "comment": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Unique identifier for the comment." },
          "author": { "type": "integer", "description": "The ID of the user object, if author was a user." },
          "author_email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the comment author."
          },
          "author_ip": { "type": "string", "format": "ip", "description": "IP address for the comment author." },
          "author_name": { "type": "string", "description": "Display name for the comment author." },
          "author_url": { "type": "string", "format": "uri", "description": "URL for the comment author." },
          "author_user_agent": { "type": "string", "description": "User agent for the comment author." },
          "content": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "Content for the comment, as it exists in the database." },
              "rendered": { "type": "string", "description": "HTML content for the comment, transformed for display." }
            },
            "description": "The content for the comment."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the comment was published, in the site's timezone."
          },
          "date_gmt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the comment was published, as GMT."
          },
          "link": { "type": "string", "format": "uri", "description": "URL to the comment." },
          "parent": { "type": "integer", "description": "The ID for the parent of the comment." },
          "post": { "type": "integer", "description": "The ID of the associated post object." },
          "status": { "type": "string", "description": "State of the comment." },
          "type": { "type": "string", "description": "Type of the comment." },
          "author_avatar_urls": {
            "type": "object",
            "properties": {
              "24": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 24 pixels." },
              "48": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 48 pixels." },
              "96": { "type": "string", "format": "uri", "description": "Avatar URL with image size of 96 pixels." }
            },
            "description": "Avatar URLs for the comment author."
          },
          "meta": { "type": "object", "description": "Meta fields." }
        }
      },
      "search-result": {
        "type": "object",
        "properties": {
          "id": { "type": ["integer", "string"], "description": "Unique identifier for the object." },
          "title": { "type": "string", "description": "The title for the object." },
          "url": { "type": "string", "format": "uri", "description": "URL to the object." },
          "type": { "type": "string", "description": "Object type.", "enum": ["post", "term", "post-format"] },
          "subtype": {
            "type": "string",
            "description": "Object subtype.",
            "enum": ["post", "page", "category", "post_tag"]
          }
        }
      },
      "rendered-block": {
        "type": "object",
        "properties": { "rendered": { "type": "string", "description": "The rendered block." } },
        "required": ["rendered"]
      },
      "block-type": {
        "type": "object",
        "properties": {
          "api_version": { "type": "integer", "description": "Version of block API." },
          "title": { "type": "string", "description": "Title of block type." },
          "name": { "type": "string", "description": "Unique name identifying the block type." },
          "description": { "type": "string", "description": "Description of block type." },
          "icon": { "type": ["string", "null"], "description": "Icon of block type." },
          "attributes": { "type": ["object", "null"], "description": "Block attributes." },
          "provides_context": { "type": "object", "description": "Context provided by blocks of this type." },
          "uses_context": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Context values inherited by blocks of this type."
          },
          "supports": { "type": "object", "description": "Block supports." },
          "category": { "type": ["string", "null"], "description": "Block category." },
          "is_dynamic": { "type": "boolean", "description": "Is the block dynamically rendered." },
          "editor_script": { "type": ["string", "null"], "description": "Editor script handle." },
          "script": { "type": ["string", "null"], "description": "Public facing and editor script handle." },
          "view_script": { "type": ["string", "null"], "description": "Public facing script handle." },
          "editor_style": { "type": ["string", "null"], "description": "Editor style handle." },
          "style": { "type": ["string", "null"], "description": "Public facing and editor style handle." },
          "styles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "description": "Unique name identifying the style." },
                "label": { "type": "string", "description": "The human-readable label for the style." },
                "inline_style": {
                  "type": "string",
                  "description": "Inline CSS code that registers the CSS class required for the style."
                },
                "style_handle": { "type": "string", "description": "Contains the handle that defines the block style." }
              },
              "required": ["name"]
            },
            "description": "Block style variations."
          },
          "variations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "description": "The unique and machine-readable name." },
                "title": { "type": "string", "description": "A human-readable variation title." },
                "description": { "type": "string", "description": "A detailed variation description." },
                "category": { "type": ["string", "null"], "description": "Block category." },
                "icon": { "type": ["string", "null"], "description": "Icon of block type." },
                "isDefault": {
                  "type": "boolean",
                  "description": "Indicates whether the current variation is the default one."
                },
                "attributes": { "type": "object", "description": "The initial values for attributes." },
                "innerBlocks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "description": "The name of the inner block." },
                      "attributes": { "type": "object", "description": "The attributes of the inner block." },
                      "innerBlocks": {
                        "type": "array",
                        "description": "A list of the inner block's own inner blocks. This is a recursive definition following the parent innerBlocks schema."
                      }
                    }
                  },
                  "description": "The list of inner blocks used in the example."
                },
                "example": { "type": ["object", "null"], "description": "Block example." },
                "scope": {
                  "type": ["array", "null"],
                  "description": "The list of scopes where the variation is applicable. When not provided, it assumes all available scopes."
                },
                "keywords": { "type": "array", "items": { "type": "string" }, "description": "Block keywords." }
              },
              "required": ["name", "title"]
            },
            "description": "Block variations."
          },
          "textdomain": { "type": ["string", "null"], "description": "Public text domain." },
          "parent": { "type": ["array", "null"], "description": "Parent blocks." },
          "ancestor": { "type": ["array", "null"], "description": "Ancestor blocks." },
          "keywords": { "type": "array", "items": { "type": "string" }, "description": "Block keywords." },
          "example": { "type": ["object", "null"], "description": "Block example." }
        }
      },
      "wp_global_styles": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of global styles config." },
          "styles": { "type": ["object"], "description": "Global styles." },
          "settings": { "type": ["object"], "description": "Global settings." },
          "title": { "type": ["object", "string"], "description": "Title of the global styles variation." }
        }
      },
      "settings": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "description": "Site title." },
          "description": { "type": "string", "description": "Site tagline." },
          "url": { "type": "string", "format": "uri", "description": "Site URL." },
          "email": {
            "type": "string",
            "format": "email",
            "description": "This address is used for admin purposes, like new user notification."
          },
          "timezone": { "type": "string", "description": "A city in the same timezone as you." },
          "date_format": { "type": "string", "description": "A date format for all date strings." },
          "time_format": { "type": "string", "description": "A time format for all time strings." },
          "start_of_week": {
            "type": "integer",
            "description": "A day number of the week that the week should start on."
          },
          "language": { "type": "string", "description": "WordPress locale code." },
          "use_smilies": {
            "type": "boolean",
            "description": "Convert emoticons like :-) and :-P to graphics on display."
          },
          "default_category": { "type": "integer", "description": "Default post category." },
          "default_post_format": { "type": "string", "description": "Default post format." },
          "posts_per_page": { "type": "integer", "description": "Blog pages show at most." },
          "default_ping_status": {
            "type": "string",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "enum": ["open", "closed"]
          },
          "default_comment_status": {
            "type": "string",
            "description": "Allow people to submit comments on new posts.",
            "enum": ["open", "closed"]
          },
          "site_logo": { "type": "integer", "description": "Site logo." },
          "site_icon": { "type": "integer", "description": "Site icon." }
        }
      },
      "theme": {
        "type": "object",
        "properties": {
          "stylesheet": {
            "type": "string",
            "description": "The theme's stylesheet. This uniquely identifies the theme."
          },
          "template": {
            "type": "string",
            "description": "The theme's template. If this is a child theme, this refers to the parent theme, otherwise this is the same as the theme's stylesheet."
          },
          "author": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "The theme author's name, as found in the theme header." },
              "rendered": { "type": "string", "description": "HTML for the theme author, transformed for display." }
            },
            "description": "The theme author."
          },
          "author_uri": {
            "type": "object",
            "properties": {
              "raw": {
                "type": "string",
                "format": "uri",
                "description": "The website of the theme author, as found in the theme header."
              },
              "rendered": {
                "type": "string",
                "format": "uri",
                "description": "The website of the theme author, transformed for display."
              }
            },
            "description": "The website of the theme author."
          },
          "description": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "The theme description, as found in the theme header." },
              "rendered": { "type": "string", "description": "The theme description, transformed for display." }
            },
            "description": "A description of the theme."
          },
          "name": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "The theme name, as found in the theme header." },
              "rendered": { "type": "string", "description": "The theme name, transformed for display." }
            },
            "description": "The name of the theme."
          },
          "requires_php": {
            "type": "string",
            "description": "The minimum PHP version required for the theme to work."
          },
          "requires_wp": {
            "type": "string",
            "description": "The minimum WordPress version required for the theme to work."
          },
          "screenshot": { "type": "string", "format": "uri", "description": "The theme's screenshot URL." },
          "tags": {
            "type": "object",
            "properties": {
              "raw": {
                "type": "array",
                "items": { "type": "string" },
                "description": "The theme tags, as found in the theme header."
              },
              "rendered": { "type": "string", "description": "The theme tags, transformed for display." }
            },
            "description": "Tags indicating styles and features of the theme."
          },
          "textdomain": { "type": "string", "description": "The theme's text domain." },
          "theme_supports": {
            "type": "object",
            "properties": {
              "align-wide": { "type": "boolean", "description": "Whether theme opts in to wide alignment CSS class." },
              "automatic-feed-links": {
                "type": "boolean",
                "description": "Whether posts and comments RSS feed links are added to head."
              },
              "custom-background": {
                "type": ["boolean", "object"],
                "description": "Custom background if defined by the theme."
              },
              "custom-header": {
                "type": ["boolean", "object"],
                "description": "Custom header if defined by the theme."
              },
              "custom-logo": { "type": ["boolean", "object"], "description": "Custom logo if defined by the theme." },
              "customize-selective-refresh-widgets": {
                "type": "boolean",
                "description": "Whether the theme enables Selective Refresh for Widgets being managed with the Customizer."
              },
              "dark-editor-style": {
                "type": "boolean",
                "description": "Whether theme opts in to the dark editor style UI."
              },
              "disable-custom-colors": {
                "type": "boolean",
                "description": "Whether the theme disables custom colors."
              },
              "disable-custom-font-sizes": {
                "type": "boolean",
                "description": "Whether the theme disables custom font sizes."
              },
              "disable-custom-gradients": {
                "type": "boolean",
                "description": "Whether the theme disables custom gradients."
              },
              "editor-color-palette": {
                "type": ["boolean", "array"],
                "description": "Custom color palette if defined by the theme."
              },
              "editor-font-sizes": {
                "type": ["boolean", "array"],
                "description": "Custom font sizes if defined by the theme."
              },
              "editor-gradient-presets": {
                "type": ["boolean", "array"],
                "description": "Custom gradient presets if defined by the theme."
              },
              "editor-styles": {
                "type": "boolean",
                "description": "Whether theme opts in to the editor styles CSS wrapper."
              },
              "html5": {
                "type": ["boolean", "array"],
                "description": "Allows use of HTML5 markup for search forms, comment forms, comment lists, gallery, and caption."
              },
              "formats": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["standard", "aside", "chat", "gallery", "link", "image", "quote", "status", "video", "audio"]
                },
                "description": "Post formats supported."
              },
              "post-thumbnails": {
                "type": ["boolean", "array"],
                "description": "The post types that support thumbnails or true if all post types are supported."
              },
              "responsive-embeds": {
                "type": "boolean",
                "description": "Whether the theme supports responsive embedded content."
              },
              "title-tag": { "type": "boolean", "description": "Whether the theme can manage the document title tag." },
              "wp-block-styles": {
                "type": "boolean",
                "description": "Whether theme opts in to default WordPress block styles for viewing."
              }
            },
            "description": "Features supported by this theme."
          },
          "theme_uri": {
            "type": "object",
            "properties": {
              "raw": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the theme's webpage, as found in the theme header."
              },
              "rendered": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the theme's webpage, transformed for display."
              }
            },
            "description": "The URI of the theme's webpage."
          },
          "version": { "type": "string", "description": "The theme's current version." },
          "status": { "type": "string", "description": "A named status for the theme.", "enum": ["inactive", "active"] }
        }
      },
      "plugin": {
        "type": "object",
        "properties": {
          "plugin": { "type": "string", "description": "The plugin file." },
          "status": {
            "type": "string",
            "description": "The plugin activation status.",
            "enum": ["inactive", "active"]
          },
          "name": { "type": "string", "description": "The plugin name." },
          "plugin_uri": { "type": "string", "format": "uri", "description": "The plugin's website address." },
          "author": { "type": "object", "description": "The plugin author." },
          "author_uri": { "type": "string", "format": "uri", "description": "Plugin author's website address." },
          "description": {
            "type": "object",
            "properties": {
              "raw": { "type": "string", "description": "The raw plugin description." },
              "rendered": { "type": "string", "description": "The plugin description formatted for display." }
            },
            "description": "The plugin description."
          },
          "version": { "type": "string", "description": "The plugin version number." },
          "network_only": {
            "type": "boolean",
            "description": "Whether the plugin can only be activated network-wide."
          },
          "requires_wp": { "type": "string", "description": "Minimum required version of WordPress." },
          "requires_php": { "type": "string", "description": "Minimum required version of PHP." },
          "textdomain": { "type": "string", "description": "The plugin's text domain." }
        }
      },
      "sidebar": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of sidebar." },
          "name": { "type": "string", "description": "Unique name identifying the sidebar." },
          "description": { "type": "string", "description": "Description of sidebar." },
          "class": {
            "type": "string",
            "description": "Extra CSS class to assign to the sidebar in the Widgets interface."
          },
          "before_widget": {
            "type": "string",
            "description": "HTML content to prepend to each widget's HTML output when assigned to this sidebar. Default is an opening list item element."
          },
          "after_widget": {
            "type": "string",
            "description": "HTML content to append to each widget's HTML output when assigned to this sidebar. Default is a closing list item element."
          },
          "before_title": {
            "type": "string",
            "description": "HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element."
          },
          "after_title": {
            "type": "string",
            "description": "HTML content to append to the sidebar title when displayed. Default is a closing h2 element."
          },
          "status": { "type": "string", "description": "Status of sidebar.", "enum": ["active", "inactive"] },
          "widgets": { "type": "array", "items": { "type": ["object", "string"] }, "description": "Nested widgets." }
        }
      },
      "widget-type": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique slug identifying the widget type." },
          "name": { "type": "string", "description": "Human-readable name identifying the widget type." },
          "description": { "type": "string", "description": "Description of the widget." },
          "is_multi": { "type": "boolean", "description": "Whether the widget supports multiple instances" },
          "classname": { "type": "string", "description": "Class name" }
        }
      },
      "widget": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique identifier for the widget." },
          "id_base": {
            "type": "string",
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
          },
          "sidebar": { "type": "string", "description": "The sidebar the widget belongs to." },
          "rendered": { "type": "string", "description": "HTML representation of the widget." },
          "rendered_form": { "type": "string", "description": "HTML representation of the widget admin form." },
          "instance": {
            "type": "object",
            "properties": {
              "encoded": { "type": "string", "description": "Base64 encoded representation of the instance settings." },
              "hash": { "type": "string", "description": "Cryptographic hash of the instance settings." },
              "raw": { "type": "object", "description": "Unencoded instance settings, if supported." }
            },
            "description": "Instance settings of the widget, if supported."
          },
          "form_data": {
            "type": "string",
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
          }
        },
        "required": ["sidebar"]
      },
      "block-directory-item": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The block name, in namespace/block-name format." },
          "title": { "type": "string", "description": "The block title, in human readable format." },
          "description": {
            "type": "string",
            "description": "A short description of the block, in human readable format."
          },
          "id": { "type": "string", "description": "The block slug." },
          "rating": { "type": "number", "description": "The star rating of the block." },
          "rating_count": { "type": "integer", "description": "The number of ratings." },
          "active_installs": { "type": "integer", "description": "The number sites that have activated this block." },
          "author_block_rating": {
            "type": "number",
            "description": "The average rating of blocks published by the same author."
          },
          "author_block_count": {
            "type": "integer",
            "description": "The number of blocks published by the same author."
          },
          "author": { "type": "string", "description": "The WordPress.org username of the block author." },
          "icon": { "type": "string", "format": "uri", "description": "The block icon." },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the block was last updated."
          },
          "humanized_updated": {
            "type": "string",
            "description": "The date when the block was last updated, in fuzzy human readable format."
          }
        }
      },
      "pattern-directory-item": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "The pattern ID." },
          "title": { "type": "string", "description": "The pattern title, in human readable format." },
          "content": { "type": "string", "description": "The pattern content." },
          "categories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The pattern's category slugs."
          },
          "keywords": { "type": "array", "items": { "type": "string" }, "description": "The pattern's keyword slugs." },
          "description": { "type": "string", "description": "A description of the pattern." },
          "viewport_width": {
            "type": "integer",
            "description": "The preferred width of the viewport when previewing a pattern, in pixels."
          }
        }
      },
      "block-pattern": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The pattern name." },
          "title": { "type": "string", "description": "The pattern title, in human readable format." },
          "description": { "type": "string", "description": "The pattern detailed description." },
          "viewport_width": { "type": "number", "description": "The pattern viewport width for inserter preview." },
          "block_types": {
            "type": "array",
            "description": "Block types that the pattern is intended to be used with."
          },
          "categories": { "type": "array", "description": "The pattern category slugs." },
          "keywords": { "type": "array", "description": "The pattern keywords." },
          "content": { "type": "string", "description": "The pattern content." },
          "inserter": { "type": "boolean", "description": "Determines whether the pattern is visible in inserter." }
        }
      },
      "block-pattern-category": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The category name." },
          "label": { "type": "string", "description": "The category label, in human readable format." }
        }
      },
      "menu-location": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The name of the menu location." },
          "description": { "type": "string", "description": "The description of the menu location." },
          "menu": { "type": "integer", "description": "The ID of the assigned menu." }
        }
      }
    }
  }
}
